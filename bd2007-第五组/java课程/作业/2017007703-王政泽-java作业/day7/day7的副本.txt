1.static变量和实例变量的区别?
  1.所属不同
  2.内存中的位置不同
    static存在方法区的静态区   实例变量存在于堆区中
  3.内存中出现的时间不同
    static随着类的加载而加载  实例变量随着对象的创建而加载 随着对象的销毁而销毁
  4.调用不同
    静态变量用类调用，也可以通过对象调用 实例变量用对象调用

2.final修饰符的作用?
  修饰类：
	不能继承
  修饰方法：
	不可重写 
  修饰变量：
	不可改变
	
3.abstract修饰符的作用?
  没有方法体
  修饰方法 抽象方法 
  修饰类 抽象类
  


4.
Animal--abstract	
+legs:int			
+Animal(legs:int)	
+walk()	--abstract	        
+eat()--abstract	


任务1：创建Animal类，它是所有动物类的抽象超类
任务2：创建Snake类，继承Animal类 并根据实际情况去完善
任务3：创建Cat类，继承Animal类 并根据实际情况去完善
任务4：创建Fish类，继承Animal类 并根据实际情况去完善Snake类





分析运行结果
A 静态代码块
A 静态方法
B 静态方法
A 代码块
A 构造方法

B 构造块
B 方法
B 构造方法

public class A {
	static {
		System.out.println("A 静态代码块");
	       }

	private static String staticStr = getStaticStr();
	private String str = getStr();

	{
		System.out.println("A 代码块");
	}

	public A() {
		System.out.println("A 构造方法");
	}

	private static String getStaticStr() {
		System.out.println("A 静态方法");
		return null;
	}

	private String getStr() {
		System.out.println("A 实例属性初始化");
		return null;
	}

	public class B extends A {
		private static String staticStr = getStaticStr();
		static {
			System.out.println("B 静态代码块");
		}

		public B() {
			System.out.println("B 构造方法");
		}

		{
			System.out.println("B 构造块");
		}

		private String str = getStr();

		private static String getStaticStr() {
			System.out.println("B 静态方法");
			return null;
		}
		private String getStr() {
			System.out.println("B 方法");
			return null;
		}
	}

	public static void main(String[] args) {	        
		    new B();	    
		    }
