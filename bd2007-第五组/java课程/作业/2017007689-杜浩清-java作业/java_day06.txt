新建一个窗户类
	大小（size）
	颜色（color）
	样式（style）
public class Windows {
	private String size;
	private String color;
	private String style;
	
	public Windows(String size, String color, String style) {
		this.size = size;
		this.color = color;
		this.style = style;
	}
	public String getSize() {
		return size;
	}
	public void setSize(String size) {
		this.size = size;
	}
	public String getColor() {
		return color;
	}
	public void setColor(String color) {
		this.color = color;
	}
	public String getStyle() {
		return style;
	}
	public void setStyle(String style) {
		this.style = style;
	}
	@Override
	public String toString() {
		return "Windows [size=" + size + ", color=" + color + ", style=" + style + "]";
	}
}

新建一个门类
	大小（size）
	颜色（color）
	材质（material）
public class Door {
	private String size;
	private String color;
	private String material;
	public Door(String size, String color, String material) {
		super();
		this.size = size;
		this.color = color;
		this.material = material;
	}
	public String getSize() {
		return size;
	}
	public void setSize(String size) {
		this.size = size;
	}
	public String getColor() {
		return color;
	}
	public void setColor(String color) {
		this.color = color;
	}
	public String getMaterial() {
		return material;
	}
	public void setMaterial(String material) {
		this.material = material;
	}
	@Override
	public String toString() {
		return "Door [size=" + size + ", color=" + color + ", material=" + material + "]";
	}

}

新建一个卧室类
	窗户（windows）
	门（door）
	主人（user）
package com.briup.day06;

public class Bedroom {
	public Windows[] window = new Windows[2];
	public Door door;

}

小明家的卧室有两个窗户，一个窗户的尺寸是80*90
黑色 推拉式 另一个是白色双开门 尺寸是90*100
有一个门 是褐色木质门 200*80，将以上信息封装到实体
public class Test1 {
	public static void main(String[] args) {
		Windows w1 = new Windows("80*90","黑色","推拉式");
		Windows w2 = new Windows("90*100","白色","双开门");
		Bedroom b = new Bedroom();
		Windows[] window = b.window;
		window[0] = w1;
		window[1] = w2;
		
		for(int i=0;i<window.length;i++) {
			System.out.println(window[i]);
		}
	}

}
				
写Shape类，要求如下：

	1.int类型属性x和y，分别表示图形的中心点坐标

	2.无参构造器

	3.构造器，对x和y进行初始化

	4.draw()方法，输出"Shape draw"
public class Shape {
	int x;
	int y;
	public Shape() {
		
	}
	
	public Shape(int x,int y) {
		this.x = x;
		this.y = y;
	}
	
	public void draw() {
		System.out.println("Shape draw");
	}

}



	写Circle类，继承Shape类，要求如下

	1.double类型属性r，表示圆的半径

	2.无参构造器，将r初始化为1.0

	3.构造器，对r进行初始化

	4.构造器，对x、y、r进行初始化

	5.draw()方法，输出"draw in circle"和x,y,r的值
public class Circle extends Shape {
	double r;
	public Circle() {
		r=1.0;
	}
	
	public Circle(double r) {
		this.r = r;
	}
	
	public Circle(int x,int y,double r) {
		this.x =x;
		this.y = y;
		this.r = r;
	}
	
	public void draw() {
		System.out.println("draw in circle");
		System.out.println("x:"+x+"y:"+y+"r:"+r);
		
	}

}

	写Rectangle类，继承Shape类，要求如下

	1.double类型属性height和width，表示矩形的高和宽

	2.无参构造器，将height和width都初始化为1.0

	3.构造器，对height和width进行初始化

	4.构造器，对x、y、height、width进行初始化

	5.draw()方法，输出"draw in rectangle"和x,y,height,width的值
public class Rectangle extends Shape {
	double height;
	double width;
	public Rectangle() {
		height = 1.0;
		width = 1.0;
	}
	
	public Rectangle(double width,double height) {
		this.height = height;
		this.width = width;
	}
	
	public Rectangle(int x,int y,double width,double height) {
		this.x=x;
		this.y=y;
		this.height=height;
		this.width = width;
	}
   public void draw() {
	   System.out.println("draw in rectangle");
	   System.out.println("x:"+x+"y:"+y+"width:"+width+"height:"+height);
   }
}

使用ShapeTest类测试以上代码。
public class Test02 {
	public static void main(String[] args) {
		Shape c = new Circle();
		c.draw();
		
		Shape r = new Rectangle();
		r.draw();
	}

}


设计代码完成下面功能:
	设计一个动物类，动物有名字，和吃东西这个方法
	但是动物园里的各个动物的进食习性不同，猫吃鱼，狗吃肉，大象吃香蕉.
	请写代码实现以上功能

public class AnimalTest {
	public static void main(String[] args) {
		Animal c = new Cat("猫");
		c.eat();
		Animal d = new Dog("狗");
		d.eat();
	}

}

class Animal {
	String name;
	public Animal() {
		
	}
	
	public Animal(String name) {
		this.name = name;
	}
	
	public void eat() {
		
	}
}

class Cat extends Animal {
	
	public Cat(String name) {
		this.name = name;
	}
	@Override
	public void eat() {
		System.out.println(name+"吃鱼");
	}
}

class Dog extends Animal {
	public Dog(String name) {
		this.name = name;
	}
	@Override
	public void eat() {
		System.out.println(name+"吃肉");
	}
}














